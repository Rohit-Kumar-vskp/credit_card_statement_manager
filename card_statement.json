{"files":[{"id":"f970fc1f-8b7e-4209-a726-28bcbb7e451c","name":"appsscript","type":"json","source":"{\n  \"timeZone\": \"Asia/Kolkata\",\n  \"dependencies\": {\n  },\n  \"exceptionLogging\": \"STACKDRIVER\",\n  \"runtimeVersion\": \"V8\"\n}"},{"id":"e5facd63-2721-4a4c-96e6-3c692e1b171e","name":"Code","type":"server_js","source":"function saveAttachmentsToStructuredFolders() {\n  var mainFolderId \u003d \"1ZRw-1xhUv3K2-Q6T1Z2aCoFZGetqwfun\"; // üîÅ Replace with your actual folder ID\n  var subjectFolderMap \u003d {\n    \"SBI Card ELITE Monthly Statement\": \"sbi\",\n    \"HDFC Bank - Diners Club International Credit Card Statement\": \"hdfc\"\n    // \"ICICI BANK\": \"icici\"\n  };\n\n  var mainFolder \u003d DriveApp.getFolderById(mainFolderId);\n\n  Object.keys(subjectFolderMap).forEach(subject \u003d\u003e {\n    var cardType \u003d subjectFolderMap[subject];\n    var threads \u003d GmailApp.search(\u0027subject:\"\u0027 + subject + \u0027\"\u0027);\n\n    threads.forEach(thread \u003d\u003e {\n      var messages \u003d thread.getMessages();\n      messages.forEach(message \u003d\u003e {\n        var attachments \u003d message.getAttachments();\n\n        attachments.forEach(attachment \u003d\u003e {\n          var originalFileName \u003d attachment.getName();\n          if (originalFileName \u0026\u0026 originalFileName.toLowerCase().endsWith(\".pdf\")) {\n            var { year, month } \u003d extractYearMonth(originalFileName, cardType);\n\n            if (year \u0026\u0026 month) {\n              var cardFolder \u003d getOrCreateFolder(mainFolder, cardType);\n              var renamedFileName \u003d month + \"_\" + year + \".pdf\"; // üí° MM_YYYY.pdf format\n\n              if (!fileExists(cardFolder, renamedFileName)) {\n                // cardFolder.createFile(attachment.getAs(MimeType.PDF)).setName(renamedFileName);\n                //if (attachment.getContentType() \u003d\u003d\u003d MimeType.PDF) {\n                  cardFolder.createFile(attachment.copyBlob()).setName(renamedFileName);\n                //}\n                Logger.log(\"‚úÖ Saved: \" + renamedFileName + \" to folder: \" + cardType);\n              } else {\n                Logger.log(\"‚è© Skipped (already exists): \" + renamedFileName);\n              }\n            } else {\n              Logger.log(\"‚ö†Ô∏è Could not determine date for: \" + originalFileName);\n            }\n          } else {\n            Logger.log(\"‚ùå Ignored non-PDF: \" + originalFileName);\n          }\n        });\n      });\n    });\n  });\n}\n\n// Extract year and month from filename based on card type\nfunction extractYearMonth(fileName, cardType) {\n  try {\n    var year \u003d \"\", month \u003d \"\";\n\n    if (cardType \u003d\u003d\u003d \"icici\") {\n      var parts \u003d fileName.split(\"-\");\n      year \u003d parts[0];\n      month \u003d parts[1];\n    } else if (cardType \u003d\u003d\u003d \"sbi\") {\n      var parts \u003d fileName.split(\"_\");\n      if (parts.length \u003e 1) {\n        var dateStr \u003d parts[1].replace(\".pdf\", \"\");\n        if (dateStr.length \u003d\u003d\u003d 8) { // Format: DDMMYYYY\n          month \u003d dateStr.slice(2, 4);\n          year \u003d dateStr.slice(4);\n        }\n      }\n    } else if (cardType \u003d\u003d\u003d \"hdfc\") {\n      var temp \u003d fileName.split(\"_\")[1];\n      temp \u003d temp.split(\".\")[0];\n      var tokens \u003d temp.split(\"-\");\n      year \u003d tokens[2];\n      month \u003d tokens[1];\n    }\n\n    // Ensure month is always 2-digit\n    month \u003d (\"0\" + parseInt(month)).slice(-2);\n\n    return { year, month };\n  } catch (e) {\n    Logger.log(\"‚ùå Error extracting date from: \" + fileName + \" -\u003e \" + e.message);\n    return { year: null, month: null };\n  }\n}\n\n// Check if a file already exists in the folder\nfunction fileExists(folder, fileName) {\n  var files \u003d folder.getFilesByName(fileName);\n  return files.hasNext();\n}\n\n// Create or retrieve folder\nfunction getOrCreateFolder(parent, name) {\n  var folders \u003d parent.getFoldersByName(name);\n  if (folders.hasNext()) {\n    return folders.next();\n  }\n  return parent.createFolder(name);\n}\n"}]}